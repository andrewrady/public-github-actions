name: Publish (.NET)

# Performs only the 'dotnet publish'.

permissions:
  contents: read
  packages: read

on:

  workflow_call:

    inputs:

      artifact_name:
        required: true
        type: string

      configuration:
        required: false
        type: string
        default: "Release"

      dotnet_version:
        required: false
        type: string
        default: "6.0"

      persisted_workspace_artifact_name:
        description: Name of the artifact which contains the persisted workspace directory.
        required: true
        type: string

      project_directory:
        required: false
        type: string
        default: "./"

      informational_version:
        required: true
        type: string

      version:
        required: true
        type: string

    outputs:

      artifact_name:
        value: ${{ jobs.publish.outputs.artifact_name }}

      artifact_filename:
        value: ${{ jobs.publish.outputs.artifact_filename }}

jobs:

  publish:
    name: Publish (.NET)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.project_directory }}

    outputs:
      artifact_name: ${{ inputs.artifact_name }}
      artifact_filename: ${{ env.ZIPFILENAME }}

    env:
      ARTIFACTNAME: ${{ inputs.artifact_name }}
      CONFIGURATION: ${{ inputs.configuration }}
      NUGETHASHFILES: "${{ inputs.project_directory }}**/*.csproj"
      PROJECTDIRECTORY: ${{ inputs.project_directory }}
      INFORMATIONALVERSION: ${{ inputs.informational_version }}
      VERSION: ${{ inputs.version }}
      ZIPFILENAME: "${{ inputs.artifact_name }}.zip"

    steps:

      - name: Validate inputs.artifact_name
        uses: ritterim/public-github-actions/actions/file-name-validator@v1.9.0
        with:
          file_name: ${{ env.ARTIFACTNAME }}

      - name: Validate inputs.configuration
        uses: ritterim/public-github-actions/actions/regex-validator@v1.9.0
        with:
          case_sensitive: false
          regex_pattern: "^debug|release$"
          value: ${{ env.CONFIGURATION }}

      - name: Validate inputs.project_directory
        uses: ritterim/public-github-actions/actions/path-name-validator@v1.9.0
        with:
          path_name: ${{ env.PROJECTDIRECTORY }}

      - name: Validate inputs.informational_version
        uses: ritterim/public-github-actions/actions/version-number-validator@v1.9.0
        with:
          version: ${{ env.INFORMATIONALVERSION }}

      - name: Validate inputs.version
        uses: ritterim/public-github-actions/actions/version-number-validator@v1.9.0
        with:
          version: ${{ env.VERSION }}

      - name: Validate ZIPFILENAME
        uses: ritterim/public-github-actions/actions/file-name-validator@v1.9.0
        with:
          file_name: ${{ env.ZIPFILENAME }}

      - name: Restore Workspace
        uses: ritterim/public-github-actions/forks/persist-workspace@v1.9.1
        with:
          action: retrieve
          artifact_name: ${{ inputs.persisted_workspace_artifact_name }}

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Setup ~/.nuget/packages cache
        uses: actions/cache@v3
        with:
          key: nuget-packages-${{ runner.os }}-${{ hashFiles(env.NUGETHASHFILES) }}
          path: |
            ~/.nuget/packages

      - run: mkdir -p 'app'

      - name: dotnet publish
        run: |
          dotnet publish \
            --no-build \
            --configuration "${CONFIGURATION}" \
            -p:Version="${VERSION}" \
            -p:InformationalVersion="${INFORMATIONALVERSION}" \
            --property:PublishDir=app

      - name: Create githash.txt file
        run: |
          PULL_REQUEST_HEAD_SHA=${{ github.event.pull_request.head.sha }}
          GH_SHA="${PULL_REQUEST_HEAD_SHA:-${GITHUB_SHA:-ERROR}}"
          echo $GH_SHA > app/githash.txt

      - run: cat app/githash.txt

      - run: ls -lR 'app'

      - run: mkdir -p 'output'

      - name: Create Release Zip File
        working-directory: "${{ inputs.project_directory }}app"
        run: |
          zip -v -r \
            "../output/${ZIPFILENAME}" \
            .

      - run: ls -lt output/*.zip

      - name: Test Release Zip File
        run: zip -T "output/${ZIPFILENAME}"

      - name: Upload Artifact for Deployment
        id: upload-artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.artifact_name }}
          path: "${{ inputs.project_directory }}output/${{ env.ZIPFILENAME }}"
          if-no-files-found: error
